#include <GL/gl.h>
#include <GL/glut.h>

int tx,ty,sx,sy,shx,shy,i;

void display(void)
{

    glClear (GL_COLOR_BUFFER_BIT);

    int x=10, y=10, std=10;

//Main 2D Square; color red
    glColor3f (139, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2d (std, std);
    glVertex2d (std+x, std);
    glVertex2d (std+x, std+y);
    glVertex2d (std, std+y);
    glEnd();

//Translation; color green
    glColor3f (0.0, 100.0, 0.0);
    glBegin(GL_POLYGON);
    glVertex2d (std+tx, std+ty);
    glVertex2d (std+x+tx, std+ty);
    glVertex2d (std+x+tx, std+y+ty);
    glVertex2d (std+tx, std+y+ty);
    glEnd();

//Scaling; color yellow
    glColor3f (255, 255, 0);
    glBegin(GL_POLYGON);
    glVertex2d (std*sx, std*sy);
    glVertex2d (std+x*sx, std*sy);
    glVertex2d (std+x*sx, std+y*sy);
    glVertex2d (std*sx, std+y*sy);
    glEnd();


//Reflection x-axis
    glColor3f (255, 255, 255);
    glBegin(GL_POLYGON);
    glVertex2d (std, -std);
    glVertex2d (std+x, -std);
    glVertex2d (std+x, -(std+y));
    glVertex2d (std, -(std+y));
    glEnd();

//Reflection y-axis
    glColor3f (0, 255, 255);
    glBegin(GL_POLYGON);
    glVertex2d (-std, std);
    glVertex2d (-(std+x), std);
    glVertex2d (-(std+x), std+y);
    glVertex2d (-std, std+y);
    glEnd();

//Reflection 3rd Octal
    glColor3f (255, 0, 127);
    glBegin(GL_POLYGON);
    glVertex2d (-std, -std);
    glVertex2d (-(std+x), -std);
    glVertex2d (-(std+x), -(std+y));
    glVertex2d (-std, -(std+y));
    glEnd();

    glFlush ();
}
void init (void)
{
    /* select clearing (background) color */
    glClearColor (0.0, 0.0, 0.0, 0.0);
    /* initialize viewing values */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-100, 100, -100, 100, -100, 100);
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
    printf("Input values for Translation:tx ty:");
    scanf("%d %d",&tx,&ty);
    printf("Input values for Scaling:sx sy:");
    scanf("%d %d",&sx,&sy);
    printf("No Need to Input values for Reflection:");

    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (500, 500);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Transformation Algorithm");
    init ();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0; /* ISO C requires main to return int. */
}


