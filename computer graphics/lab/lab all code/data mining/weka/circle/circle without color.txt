
#include <GL/gl.h>
#include <GL/glut.h>

int r;
int x1,y1;

void plot(int x,int y)
{
    glBegin(GL_POINTS);
    glVertex2i(x,y);
    glEnd();
}

void display(void)
{
/* clear all pixels */
glClear (GL_COLOR_BUFFER_BIT);
/* draw white polygon (rectangle) with corners at
* (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
*/
glColor3f (1.0, 0.0, 0.0);

  int x=0,y=r,p;
  p = 1-r;

  plot(x,y);

  while(y>x)
  {
       if(p < 0)
       {
           x++;
           p = p + 2*x + 1;
       }else{
           x++;
           y--;
           p = p + 2*x + 1 - 2*y;
       }

       plot(x,y);
       plot(-x,y);
       plot(x,-y);
       plot(-x,-y);
       plot(y,x);
       plot(-y,x);
       plot(y,-x);
       plot(-y,-x);

  }


glFlush ();
}
void init (void)
{
/* select clearing (background) color */
glClearColor (0.0, 0.0, 0.0, 0.0);
/* initialize viewing values */
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(-500.0, 500.0, -500.0, 500.0);
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{

    printf("Radius: ");
    scanf("%d",&r);

glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (500, 500);
glutInitWindowPosition (100, 100);
glutCreateWindow ("CIRCLE");
init ();
glutDisplayFunc(display);
glutMainLoop();
return 0; /* ISO C requires main to return int. */
}
