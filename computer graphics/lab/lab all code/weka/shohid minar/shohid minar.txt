

#include <GL/gl.h>
#include <GL/glut.h>

int i,r;
float x1,x2,y1,y2, dx,dy,step,m,x,y;




void midpointalgo(){

int x = 0, y = 16;
int p=1-y;
glColor3f(1.0, 0.0, 0.0);
glBegin(GL_POLYGON);
while(x<y)
{
    if(p<0)
    {


    p=p+2*x+1;
    x=x+1;
    }
    else{
        //glVertex3d (x, y, 0);

    p=p+2*x+1-2*y;
    x++;
    y=y-1;
    }
    glVertex3d (x+37, y+30, 0);
    glVertex3d (-x+37, y+30, 0);
    glVertex3d (x+37, -y+30, 0);
    glVertex3d (-x+37, -y+30, 0);
    glVertex3d (y+37, x+30, 0);
    glVertex3d (-y+37, x+30, 0);
    glVertex3d (y+37, -x+30, 0);
    glVertex3d (-y+37, -x+30, 0);

}


glEnd();
glColor3f (1.0, 0.0, 0.0);
glBegin(GL_POLYGON);

glEnd();
}


void display(void)
{
glClear (GL_COLOR_BUFFER_BIT);
glColor3f (0.0, 0.25, 1.0);
glBegin(GL_POLYGON);

midpointalgo();

glFlush ();


glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (1,0, 0.0);
glVertex3f (5,0, 0.0);
glVertex3f (5,30, 0.0);
glVertex3f (1,30, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (1,30, 0.0);
glVertex3f (19,30, 0.0);
glVertex3f (19,35, 0.0);
glVertex3f (1,35, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (15,0, 0.0);
glVertex3f (19,0, 0.0);
glVertex3f (19,30, 0.0);
glVertex3f (15,30, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (25,0, 0.0);
glVertex3f (29,0, 0.0);
glVertex3f (29,40, 0.0);
glVertex3f (25,40, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (35,0, 0.0);
glVertex3f (39,0, 0.0);
glVertex3f (39,40, 0.0);
glVertex3f (35,40, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (45,0, 0.0);
glVertex3f (49,0, 0.0);
glVertex3f (49,40, 0.0);
glVertex3f (45,40, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (25,40, 0.0);
glVertex3f (29,40, 0.0);
glVertex3f (28,55, 0.0);
glVertex3f (23,55, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (35,40, 0.0);
glVertex3f (39,40, 0.0);
glVertex3f (38.5,55, 0.0);
glVertex3f (35.5,55, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (45,40, 0.0);
glVertex3f (49,40, 0.0);
glVertex3f (51,55, 0.0);
glVertex3f (46,55, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (23,55, 0.0);
glVertex3f (51,55, 0.0);
glVertex3f (52,60, 0.0);
glVertex3f (22,60, 0.0);
glEnd();
glColor3f (0.0, 0.0, 0.0);
glBegin(GL_POLYGON);
glVertex3f (29,39, 0.0);
glVertex3f (35,39, 0.0);
glVertex3f (35,40, 0.0);
glVertex3f (29,40, 0.0);
glEnd();
glBegin(GL_POLYGON);
glVertex3f (39,39, 0.0);
glVertex3f (45,39, 0.0);
glVertex3f (45,40, 0.0);
glVertex3f (39,40, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (55,0, 0.0);
glVertex3f (59,0, 0.0);
glVertex3f (59,30, 0.0);
glVertex3f (55,30, 0.0);
glEnd();

glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (69,0, 0.0);
glVertex3f (73,0, 0.0);
glVertex3f (73,30, 0.0);
glVertex3f (69,30, 0.0);
glEnd();
glColor3f (1.0, 1.0, 1.0);
glBegin(GL_POLYGON);
glVertex3f (55,30, 0.0);
glVertex3f (73,30, 0.0);
glVertex3f (73,35, 0.0);
glVertex3f (55,35, 0.0);
glEnd();


/* don't wait!
* start processing buffered OpenGL routines
*/
glFlush ();
}
/*dx= x2-x1;
dy=y2-y1;
m=dy/dx;

x=x1;
y=y1;

if(dy<dx){
    step = dx;

}
else
    step=dy;
for(i=0; i<step; i++){
    if(dy<dx){
        x=x+1;
        y=y+(1/m);
    }
    else{
        x=x+m;
        y=y+1;
    }
glColor3f (1.0, 0.25, 1.0);
glBegin(GL_POINTS);
glVertex3f (x, y, 0.0);
glEnd();
}



glFlush ();
}
*/
void init (void)
{
/* select clearing (background) color */
glClearColor (.25, .75, .25, 0.0);
/* initialize viewing values */
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glOrtho(0.0, 200.0, 0.0, 200.0, -200.0, 200.0);
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
printf("Enter r = ");
//scanf("%d",&r);
//scanf("%f%f" ,&x1, &y1);
//scanf("%f%f" ,&x2, &y2);
glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (500, 500);
glutInitWindowPosition (100, 100);
glutCreateWindow ("hello");
init ();
glutDisplayFunc(display);
glutMainLoop();
return 0; /* ISO C requires main to return int. */
}
