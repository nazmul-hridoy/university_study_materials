#include <GL/gl.h>
#include <GL/glut.h>
void display(void)
{
/* clear all pixels */
glClear (GL_COLOR_BUFFER_BIT);
/* draw white polygon (rectangle) with corners at
* (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
*/


int x = 0, y = 250;
int p=1-y;
glColor3f(1.0, 0.0, 0.0);
glBegin(GL_POLYGON);
while(x<y)
{
    if(p<0)
    {


    p=p+2*x+1;
    x=x+1;
    }
    else{
        //glVertex3d (x, y, 0);

    p=p+2*x+1-2*y;
    x++;
    y=y-1;
    }
    glVertex3d (x, y, 0);
    glVertex3d (-x, y, 0);
    glVertex3d (x, -y, 0);
    glVertex3d (-x, -y, 0);
    glVertex3d (y, x, 0);
    glVertex3d (-y, x, 0);
    glVertex3d (y, -x, 0);
    glVertex3d (-y, -x, 0);

}


glEnd();
glColor3f (1.0, 0.0, 0.0);
glBegin(GL_POLYGON);

glEnd();
/* don't wait!
* start processing buffered OpenGL routines
*/
glFlush ();
}
void init (void)
{
/* select clearing (background) color */
glClearColor (0.0, 0.0, 0.0, 0.0);
/* initialize viewing values */
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glOrtho(-300.0, 300,  -300, 300, -1.0, 1.0);
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (500, 500);
glutInitWindowPosition (100, 100);
glutCreateWindow ("hello");
init ();
glutDisplayFunc(display);
glutMainLoop();
return 0; /* ISO C requires main to return int. */
}


